;;;; -*- mode: emacs-lisp; -*-
;;;; ~/.emacs

;;;; for user e-mail address -*- mode: emacs-lisp; -*-
(setq user-mail-address "emailname@example.com")

;;;; magit said to do this
(setq magit-last-seen-setup-instructions "1.4.0")

;;;; activate Emacs packages
(when (>= emacs-major-version 24)
  (require 'package)

  ;; TBD: search for link, where this snippet was copied from
  (defun ensure-package-installed (&rest packages)
    "Assure every package is installed, ask for installation if itâ€™s not.

Return a list of installed packages or nil for every skipped package."
    (mapcar
     (lambda (package)
       (if (package-installed-p package)
	   nil
	 (if (y-or-n-p (format "Package %s is missing. Install it? " package))
	     (package-install package)
	   package)))
     packages))
  
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
  
  (or (file-exists-p package-user-dir)
      (package-refresh-contents))
  ;;(setq package-enable-at-startup nil)
  (package-initialize)

  (ensure-package-installed
   'evil
   'neotree
   'helm
   ;;'perspective
   'projectile
   'helm-projectile
   'flx
   'flx-ido
   'magit
   'erlang
   'elixir-mode
   'lfe-mode
   'alchemist
   'company
   'powerline
   'powerline-evil
   'slime
   'slime-company
   'markdown-mode+
   'hyde
   )

  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
  (require 'alchemist)
  (require 'evil)
  (require 'powerline)
  (require 'magit)
  (require 'erlang-start)
  (require 'elixir-mode)
  ;;(require 'perspective)
  (require 'projectile)
  ;;(persp-mode)
  (require 'hyde)

  (require 'neotree)
  (global-set-key [f8] 'neotree-toggle)

  (require 'flx-ido)
  (ido-mode 1)
  (ido-everywhere 1)
  (flx-ido-mode 1)
  ;; disable ido faces to see flx highlights.
  (setq ido-enable-flex-matching t)
  (setq ido-use-faces nil)

  (require 'helm)
  (require 'helm-config)
  (helm-mode 1)

  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)

  (evil-mode t)
  ;;(powerline-default-theme)
  (powerline-evil-center-color-theme)
  
  (setq alchemist-goto-erlang-source-dir "/opt/erlang/git/otp/")
  (setq alchemist-goto-elixir-source-dir "/opt/erlang/git/elixir/")
  (defun custom-erlang-mode-hook ()
    (define-key erlang-mode-map (kbd "M-,") 'alchemist-goto-jump-back))
  
  (add-hook 'erlang-mode-hook 'custom-erlang-mode-hook)
  (setq projectile-switch-project-action 'neotree-projectile-action)
  
  (add-hook 'neotree-mode-hook
  	    (lambda ()
  	      (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
  	      (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
  	      (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
  	      (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
  
  ;;  (defun neotree-project-dir ()
  ;;    "Open NeoTree using the git root."
  ;;    (interactive)
  ;;    (let ((project-dir (ffip-project-root))
  ;;	  (file-name (buffer-file-name)))
  ;;      (if project-dir
  ;;	  (progn
  ;;	    (neotree-dir project-dir)
  ;;	    (neotree-find file-name))
  ;;	(message "Could not find git project root."))))
  ;;  (define-key map (kbd "C-c C-p") 'neotree-project-dir)
  )

;;(if (package-installed-p 'glsl-mode)
;;    (progn
;;      (autoload 'glsl-mode "glsl-mode" nil t)
;;      (add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
;;      (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
;;      (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
;;      (add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode))))

;;; The SBCL binary and command-line arguments
(setq inferior-lisp-program "/opt/lisp/sbcl/active/bin/sbcl --noinform")
(setq slime-contribs '(slime-fancy)) ; almost everything

;;(setq inferior-erlang-machine-options '("-hidden" "-name" "emacs"))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(inhibit-startup-screen t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Inconsolata" :foundry "unknown" :slant normal :weight normal :height 98 :width normal)))))

